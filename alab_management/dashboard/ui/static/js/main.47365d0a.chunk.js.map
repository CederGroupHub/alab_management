{
  "version": 3,
  "sources": [
    "submit_exp/components/TaskNode.js",
    "submit_exp/components/ExperimentFlow.js",
    "submit_exp/components/Samples.js",
    "submit_exp/components/ControlPanel.js",
    "submit_exp/SubmitExp.js",
    "dashboard/components/Devices.js",
    "dashboard/components/Experiments.js",
    "dashboard/Dashboard.js",
    "App.js",
    "index.js"
  ],
  "names": [
    "TASK_TYPES",
    "ARG_LIST",
    "Task",
    "styled",
    "Paper",
    "TaskTitle",
    "div",
    "lightBlue",
    "TaskContent",
    "TaskNode",
    "data",
    "useState",
    "taskType",
    "setTaskType",
    "hideArgs",
    "setHideArgs",
    "samples",
    "setSamples",
    "sampleNames",
    "onSampleChange",
    "event",
    "target",
    "value",
    "split",
    "sample",
    "sampleName",
    "type",
    "position",
    "style",
    "borderRadius",
    "IconButton",
    "onClick",
    "InputLabel",
    "id",
    "Select",
    "labelId",
    "label",
    "variant",
    "onChange",
    "includes",
    "_samples",
    "i",
    "length",
    "marginLeft",
    "flex",
    "map",
    "task_name",
    "MenuItem",
    "Divider",
    "FormControl",
    "margin",
    "size",
    "width",
    "sp_n",
    "args",
    "arg",
    "TextField",
    "FlowDiv",
    "RoundButton",
    "Button",
    "NODE_TYPE",
    "task",
    "ExperimentFlow",
    "uid",
    "x",
    "y",
    "els",
    "setEls",
    "setSelectedNode",
    "xPos",
    "useRef",
    "addNode",
    "useCallback",
    "current",
    "useEffect",
    "node",
    "console",
    "log",
    "padding",
    "backgroundColor",
    "grey",
    "borderBottom",
    "color",
    "startIcon",
    "elements",
    "onConnect",
    "params",
    "addEdge",
    "animated",
    "onElementsRemove",
    "elementsToRemove",
    "removeElements",
    "onSelectionChange",
    "selectedElements",
    "nodeTypes",
    "AddSampleDiv",
    "Samples",
    "setSampleNames",
    "sampleNameInput",
    "onDelete",
    "c",
    "filter",
    "_c",
    "inputRef",
    "Chip",
    "ControlPanel",
    "MainExpDiv",
    "ControlPanelContainer",
    "FlowPanelContainer",
    "SubmitExp",
    "StyledDevicesDiv",
    "Devices",
    "devices",
    "TableContainer",
    "height",
    "component",
    "Typography",
    "Table",
    "stickyHeader",
    "aria-label",
    "TableHead",
    "TableRow",
    "TableCell",
    "align",
    "TableBody",
    "row",
    "sx",
    "border",
    "scope",
    "name",
    "className",
    "status",
    "toLowerCase",
    "Experiments",
    "experiments",
    "exp",
    "tasks",
    "index",
    "rowSpan",
    "StyledDashboardDiv",
    "StyledExperimentsDiv",
    "Dashboard",
    "experiements",
    "statusData",
    "setStatusData",
    "useInterval",
    "fetch",
    "then",
    "res",
    "json",
    "result",
    "StyledAppBar",
    "AppBar",
    "StyledNav",
    "nav",
    "App",
    "display",
    "alignItems",
    "fontWeight",
    "fontSize",
    "to",
    "isActive",
    "path",
    "element",
    "ReactDOM",
    "render",
    "StrictMode",
    "document",
    "getElementById"
  ],
  "mappings": "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",
  "file": "static/js/main.47365d0a.chunk.js",
  "sourcesContent": [
    "import React, { useState } from 'react';\r\nimport { TextField, Select, MenuItem, Paper, InputLabel, Divider, IconButton, FormControl } from '@mui/material';\r\nimport styled from 'styled-components';\r\nimport { Handle } from 'react-flow-renderer';\r\nimport ExpandLessIcon from '@mui/icons-material/ExpandLess';\r\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\r\nimport lightBlue from '@mui/material/colors/lightBlue';\r\n\r\nconst TASK_TYPES = [\"Heating\", \"Moving\", \"Weighting\"];\r\n\r\nconst ARG_LIST = {\r\n  \"Weighting\": {\r\n    \"samples\": [\"sample_1\"],\r\n    \"args\": [\"Chemical Name\", \"Amount\"],\r\n  },\r\n  \"Heating\": {\r\n    \"samples\": [\"sample_1\", \"sample_2\", \"sample_3\", \"sample_4\"],\r\n    \"args\": [\"setpoints\"],\r\n  },\r\n  \"Moving\": {\r\n    \"samples\": [\"sample\"],\r\n    \"args\": [\"dest\"],\r\n  }\r\n}\r\n\r\nconst Task = styled(Paper)`\r\n    width: 256px;\r\n`\r\n\r\nconst TaskTitle = styled.div`\r\n    padding: 0 12px 0 4px;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    background-color: ${lightBlue[50]};\r\n`;\r\n\r\nconst TaskContent = styled.div`\r\n    padding: 4px 16px 8px 16px;\r\n    display: flex;\r\n    flex-direction: column\r\n`\r\n\r\nfunction TaskNode({ data }) {\r\n  const [taskType, setTaskType] = useState('');\r\n  const [hideArgs, setHideArgs] = useState(false);\r\n  const [samples, setSamples] = useState({})\r\n\r\n  const sampleNames = data.sampleNames;\r\n\r\n  const onChange = (event) => {\r\n    setTaskType(event.target.value);\r\n    if (TASK_TYPES.includes(event.target.value)) {\r\n      let _samples = {}\r\n\r\n      for (let i = 0; i < ARG_LIST[event.target.value].samples.length; i++) {\r\n        _samples[ARG_LIST[event.target.value].samples[i]] = \"\";\r\n      }\r\n\r\n      setSamples(_samples)\r\n    } else {\r\n      setSamples({})\r\n    }\r\n  };\r\n\r\n  const onSampleChange = (event) => {\r\n    setSamples((samples) => {\r\n      const [sample, sampleName] = event.target.value.split(\".\")\r\n      samples[sample] = sampleName;\r\n      return samples\r\n    })\r\n  }\r\n\r\n  const onClick = () => {\r\n    setHideArgs(!hideArgs);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Handle type=\"target\" position=\"left\" style={{ borderRadius: \"0\" }} />\r\n      <Handle type=\"source\" position=\"right\" style={{ borderRadius: \"10px\" }} />\r\n      <Task>\r\n        <TaskTitle>\r\n          <IconButton onClick={onClick}>\r\n            {\r\n              hideArgs ? <ExpandMoreIcon /> : <ExpandLessIcon />\r\n            }\r\n\r\n          </IconButton>\r\n          <InputLabel id=\"demo-simple-select-label\"><h4>Task: </h4></InputLabel>\r\n          <Select\r\n            labelId=\"demo-simple-select-label\"\r\n            id=\"demo-simple-select\"\r\n            label=\"Task\"\r\n            variant=\"standard\"\r\n            onChange={onChange}\r\n            value={taskType}\r\n            style={{ marginLeft: \"16px\", flex: \"1 0 0\" }}\r\n          >\r\n            {\r\n              TASK_TYPES.map((task_name) => {\r\n                return (\r\n                  <MenuItem key={task_name} value={task_name}>{task_name}</MenuItem>\r\n                )\r\n              })\r\n            }\r\n          </Select>\r\n        </TaskTitle>\r\n        {taskType && !hideArgs && <Divider />}\r\n        {taskType && !hideArgs && (\r\n          <>\r\n            <TaskContent>\r\n              {\r\n                ARG_LIST[taskType].samples.map((sample) => {\r\n                  return (\r\n                    <FormControl key={`${sample}-form`} style={{ margin: \"8px 0\" }}>\r\n                      <InputLabel id={sample}>{sample}</InputLabel>\r\n                      <Select\r\n                        labelId={sample}\r\n                        id={`${sample}-select`}\r\n                        label={sample}\r\n                        size=\"small\"\r\n                        variant=\"standard\"\r\n                        onChange={onSampleChange}\r\n                        value={samples[sample] ? `${sample}.${samples[sample]}` : samples[sample]}\r\n                        style={{ flex: \"1 0 0\", width: \"200px\" }}\r\n                      >\r\n                        {\r\n                          sampleNames.map((sp_n) => {\r\n                            return (\r\n                              <MenuItem key={`${sample}.${sp_n}`}\r\n                                value={`${sample}.${sp_n}`}>\r\n                                {sp_n}\r\n                              </MenuItem>\r\n                            )\r\n                          })\r\n                        }\r\n                      </Select>\r\n                    </FormControl>\r\n                  )\r\n                })\r\n              }\r\n            </TaskContent>\r\n            <Divider />\r\n            <TaskContent>\r\n              {\r\n                ARG_LIST[taskType].args.map((arg) => {\r\n                  return (\r\n                    <TextField\r\n                      id=\"outlined-required\"\r\n                      variant=\"standard\"\r\n                      key={arg}\r\n                      label={arg}\r\n                    />\r\n                  )\r\n                })\r\n              }\r\n            </TaskContent>\r\n          </>\r\n        )}\r\n      </Task>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default TaskNode;",
    "import React, { useState, useRef, useCallback, useEffect } from 'react';\r\nimport ReactFlow, { removeElements, addEdge, Controls } from 'react-flow-renderer';\r\nimport { Button } from '@mui/material';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport CallMadeIcon from '@mui/icons-material/CallMade';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport TaskNode from './TaskNode';\r\nimport { uid } from 'uid';\r\nimport styled from 'styled-components';\r\nimport { grey } from '@mui/material/colors';\r\n\r\nconst FlowDiv = styled.div`\r\n    height: calc(100vh - 60px - 36px - 32px - 1.2px);\r\n`;\r\n\r\nconst RoundButton = styled(Button)`\r\n  border-radius: 14px !important;\r\n`;\r\n\r\nconst NODE_TYPE = {\r\n  task: TaskNode\r\n}\r\n\r\nfunction ExperimentFlow({ sampleNames }) {\r\n  const [els, setEls] = useState([{\r\n    id: uid(32),\r\n    position: { x: 50, y: 100 },\r\n    type: \"task\",\r\n    data: { sampleNames: sampleNames },\r\n  }]);\r\n\r\n  const [selectedNode, setSelectedNode] = useState({})\r\n\r\n  const xPos = useRef(50);\r\n\r\n  const addNode = useCallback(() => {\r\n    xPos.current += 280;\r\n    setEls((els) => {\r\n      return [\r\n        ...els,\r\n        {\r\n          id: uid(32),\r\n          position: { x: xPos.current, y: 100 },\r\n          type: \"task\",\r\n          data: { sampleNames: sampleNames }\r\n        }\r\n      ];\r\n    });\r\n  }, [sampleNames]);\r\n\r\n  useEffect(() => {\r\n    setEls((els) => {\r\n      return els.map((node) => {\r\n        node.data = { ...node.data, sampleNames: sampleNames }\r\n        console.log(node)\r\n        return node\r\n      })\r\n    })\r\n  }, [sampleNames])\r\n\r\n  const onConnect = (params) => setEls((els) => addEdge({ animated: true, ...params }, els));\r\n  const onElementsRemove = (elementsToRemove) =>\r\n    setEls((els) => removeElements(elementsToRemove, els));\r\n\r\n  return (\r\n    <div>\r\n      <div style={{ padding: \"16px\", backgroundColor: grey[100], borderBottom: `1.2px solid ${grey[300]}` }}>\r\n        <RoundButton color=\"primary\" style={{ margin: \"0 8px\" }} variant=\"contained\" onClick={addNode}\r\n          startIcon={<AddIcon />}>\r\n          Add Node\r\n        </RoundButton>\r\n        <RoundButton color=\"primary\" style={{ margin: \"0 8px\" }} variant=\"contained\" startIcon={<CallMadeIcon />}>\r\n          Submit\r\n        </RoundButton>\r\n      </div>\r\n      <FlowDiv>\r\n        <ReactFlow\r\n          elements={els}\r\n          onConnect={onConnect}\r\n          onElementsRemove={onElementsRemove}\r\n          onSelectionChange={(selectedElements) => {\r\n            const node = selectedElements?.[0]\r\n            setSelectedNode(node)\r\n          }}\r\n          nodeTypes={NODE_TYPE}\r\n        >\r\n        </ReactFlow>\r\n      </FlowDiv>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ExperimentFlow;",
    "import React, { useRef } from 'react';\r\nimport { Chip, TextField, Button } from '@mui/material';\r\nimport styled from 'styled-components';\r\n\r\nconst AddSampleDiv = styled.div`\r\n    display: flex;\r\n    align-items: baseline;\r\n    margin-bottom: 16px;\r\n`;\r\n\r\nfunction Samples({ style, sampleNames, setSampleNames }) {\r\n  const sampleNameInput = useRef('')\r\n\r\n  const onDelete = (data) => () => {\r\n    setSampleNames((c) => c.filter((_c) => _c !== data));\r\n  };\r\n\r\n  const onClick = () => {\r\n    setSampleNames((c) => c.includes(sampleNameInput.current.value) ?\r\n      sampleNames : [...sampleNames, sampleNameInput.current.value])\r\n  }\r\n  return (\r\n    <div style={{ ...style, margin: \"16px\" }}>\r\n      <AddSampleDiv>\r\n        <TextField id=\"add_sample_input\" size=\"small\" inputRef={sampleNameInput} style={{ width: \"50%\" }}\r\n          label=\"Sample Name\" variant=\"standard\" />\r\n        <Button variant=\"outlined\" onClick={onClick} style={{ marginLeft: \"16px\" }}>Add sample</Button>\r\n      </AddSampleDiv>\r\n      <h4>Samples:</h4>\r\n      {\r\n        sampleNames.map((data) => {\r\n          return (\r\n            <Chip\r\n              style={{ margin: \"0 4px\" }}\r\n              key={data}\r\n              label={data}\r\n              onDelete={onDelete(data)}\r\n            />\r\n          )\r\n        })\r\n      }\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Samples;",
    "import React from 'react';\r\nimport Samples from './Samples';\r\n\r\nfunction ControlPanel({ sampleNames, setSampleNames }) {\r\n  return (\r\n    <Samples sampleNames={sampleNames} setSampleNames={setSampleNames} />\r\n  )\r\n}\r\n\r\nexport default ControlPanel;\r\n",
    "import React, { useState } from 'react';\r\nimport ExperimentFlow from \"./components/ExperimentFlow\";\r\nimport ControlPanel from './components/ControlPanel';\r\nimport styled from 'styled-components';\r\nimport { grey } from '@mui/material/colors';\r\n\r\nconst MainExpDiv = styled.div`\r\n    display: flex;\r\n    height: calc(100vb-60px);\r\n`;\r\n\r\nconst ControlPanelContainer = styled.div`\r\n    background-color: ${grey[100]};\r\n    width: 24%;\r\n    min-width: 320px;\r\n    max-width: 400px;\r\n    border-right: 1.2px solid ${grey[300]};\r\n`;\r\n\r\nconst FlowPanelContainer = styled.div`\r\n    flex: 1 0 0\r\n`;\r\n\r\nfunction SubmitExp() {\r\n  const [sampleNames, setSampleNames] = useState([]);\r\n\r\n  return (\r\n    <MainExpDiv>\r\n      <ControlPanelContainer>\r\n        <ControlPanel sampleNames={sampleNames} setSampleNames={setSampleNames} />\r\n      </ControlPanelContainer>\r\n      <FlowPanelContainer>\r\n        <ExperimentFlow sampleNames={sampleNames} />\r\n      </FlowPanelContainer>\r\n    </MainExpDiv>\r\n  )\r\n}\r\n\r\nexport default SubmitExp;\r\n",
    "import React from 'react';\r\nimport Paper from '@mui/material/Paper';\r\nimport styled from 'styled-components';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport Typography from '@mui/material/Typography';\r\n\r\nconst StyledDevicesDiv = styled.div`\r\n  margin: 12px 16px;\r\n\r\n  .status {\r\n    font-family: ui-monospace,SFMono-Regular,SF Mono,\r\n      Menlo,Consolas,Liberation Mono,monospace;\r\n    color: black;\r\n  }\r\n\r\n  .status-occupied {\r\n    color: red;\r\n  }\r\n\r\n  .status-idle {\r\n    color: green;\r\n  }\r\n  \r\n  .task-id {\r\n    font-family: ui-monospace,SFMono-Regular,SF Mono,\r\n      Menlo,Consolas,Liberation Mono,monospace;\r\n  }\r\n\r\n  h3 {\r\n    padding: 4px 8px;\r\n  }\r\n`;\r\n\r\nfunction Devices({ devices }) {\r\n  return (\r\n    <TableContainer style={{ height: \"100%\" }} component={Paper}>\r\n      <StyledDevicesDiv>\r\n        <Typography variant=\"h5\">Device View</Typography>\r\n        <Table stickyHeader aria-label=\"device table\">\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell><b>Device Name</b></TableCell>\r\n              <TableCell align=\"center\"><b>Type</b></TableCell>\r\n              <TableCell align=\"center\"><b>Status</b></TableCell>\r\n              <TableCell align=\"center\"><b>Task</b></TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {devices.map((row) => (\r\n              <TableRow\r\n                key={row.name}\r\n                sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\r\n              >\r\n                <TableCell component=\"th\" scope=\"row\">\r\n                  {row.name}\r\n                </TableCell>\r\n                <TableCell align=\"center\">{row.type}</TableCell>\r\n                <TableCell align=\"center\">\r\n                  <span className={`status status-${row.status.toLowerCase()}`}>\r\n                    {row.status === \"OCCUPIED\" || row.status === \"IDLE\" ? '⬤' : ''} {row.status}\r\n                  </span>\r\n                </TableCell>\r\n                <TableCell align=\"center\"><span className=\"task-id\">{row.task}</span></TableCell>\r\n              </TableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n      </StyledDevicesDiv>\r\n    </TableContainer>\r\n  )\r\n}\r\n\r\nexport default Devices;",
    "import React from 'react';\r\nimport Paper from '@mui/material/Paper';\r\nimport styled from 'styled-components';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport Typography from '@mui/material/Typography';\r\n\r\nconst StyledDevicesDiv = styled.div`\r\n  margin: 12px 16px;\r\n\r\n  .status,\r\n  .task-id,\r\n  .task-type {\r\n    font-family: ui-monospace,SFMono-Regular,SF Mono,\r\n      Menlo,Consolas,Liberation Mono,monospace;\r\n    color: black;\r\n  }\r\n\r\n  .task-id {\r\n    font-size: 60%;\r\n  }\r\n\r\n  .status-waiting {\r\n    color: blue;\r\n  }\r\n\r\n  .status-running {\r\n    color: red;\r\n  }\r\n\r\n  .status-error {\r\n    color: red;\r\n    font-weight: bold;\r\n  }\r\n\r\n  .status-ready {\r\n    color: green;\r\n  }\r\n\r\n  h3 {\r\n    padding: 4px 8px;\r\n  }\r\n`;\r\n\r\nfunction Experiments({ experiments }) {\r\n  console.log(experiments)\r\n  return (\r\n    <TableContainer style={{ height: \"100%\" }} component={Paper}>\r\n      <StyledDevicesDiv>\r\n        <Typography variant=\"h5\">Running Experiments</Typography>\r\n        <Table stickyHeader aria-label=\"task table\">\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell align=\"center\"><b>Exp Name</b></TableCell>\r\n              <TableCell align=\"center\"><b>Task Id</b></TableCell>\r\n              <TableCell align=\"center\"><b>Type</b></TableCell>\r\n              <TableCell align=\"center\"><b>Status</b></TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {experiments.map((exp) => (exp.tasks?.map((row, index) => (\r\n              <TableRow\r\n                key={row.id}\r\n              >\r\n                {index === 0 ? (\r\n                  <TableCell align=\"center\" rowSpan={exp.tasks.length} component=\"th\" scope=\"row\">\r\n                    <span className=\"exp-name\">{exp.name}</span>\r\n                  </TableCell>\r\n                ) : <></>}\r\n                <TableCell align=\"center\">\r\n                  <span className=\"task-id\">{row.id}</span>\r\n                </TableCell>\r\n                <TableCell align=\"center\"><span className=\"task-type\">{row.type}</span></TableCell>\r\n                <TableCell align=\"center\">\r\n                  <span className={`status status-${row.status.toLowerCase()}`}>\r\n                    {row.status}\r\n                  </span>\r\n                </TableCell>\r\n              </TableRow>\r\n            ))))}\r\n          </TableBody>\r\n        </Table>\r\n      </StyledDevicesDiv>\r\n    </TableContainer >\r\n  )\r\n}\r\n\r\nexport default Experiments;",
    "import React, { useState } from 'react';\r\nimport Devices from './components/Devices';\r\nimport Experiments from './components/Experiments';\r\nimport styled from 'styled-components';\r\nimport useInterval from '@use-it/interval';\r\n\r\nconst STATUS_API = \"/api/status\";\r\n\r\nconst StyledDashboardDiv = styled.div`\r\n  margin: 12px 8px;\r\n  height: calc(100vh - 60px - 24px);\r\n  display: flex;\r\n`;\r\n\r\nconst StyledDevicesDiv = styled.div`\r\n  height: 100%;\r\n  width: calc(50vw - 20px);\r\n  margin-right: 12px;\r\n`;\r\n\r\nconst StyledExperimentsDiv = styled.div`\r\n  height: 100%;\r\n  width: calc(50vw - 8px);\r\n`;\r\n\r\nfunction Dashboard() {\r\n  // const [statusData, setStatusData] = useState({devices: [], experiements: [{\r\n  //   name: \"xxxxx\",\r\n  //   id: \"xxxxxx\",\r\n  //   samples: [{name: \"xxx\", id: \"fdfdsf\"}],\r\n  //   tasks: [{id: \"xxxx\", status: \"ERROR\", type: \"Heating\"},\r\n  //           {id: \"xxxx\", status: \"RUNNING\", type: \"Heating\"}]\r\n  // }, {\r\n  //   name: \"xxxxx\",\r\n  //   id: \"xxxxxx\",\r\n  //   samples: [{name: \"xxx\", id: \"fdfdsf\"}],\r\n  //   tasks: [{id: \"xxxx\", status: \"RUNNING\", type: \"Heating\"},\r\n  //           {id: \"xxxx\", status: \"READY\", type: \"Heating\"}]\r\n  // }]});\r\n\r\n  const [statusData, setStatusData] = useState({devices: [], experiements: []});\r\n\r\n  useInterval(() => {\r\n    fetch(STATUS_API)\r\n      .then(res => res.json())\r\n      .then(result => {\r\n        setStatusData(result);\r\n      })\r\n  }, 1000);\r\n\r\n  return (\r\n    <StyledDashboardDiv>\r\n      <StyledDevicesDiv>\r\n        <Devices devices={statusData.devices}/>\r\n      </StyledDevicesDiv>\r\n      <StyledExperimentsDiv>\r\n        <Experiments experiments={statusData.experiements}/>\r\n      </StyledExperimentsDiv>\r\n    </StyledDashboardDiv>\r\n  )\r\n}\r\n\r\nexport default Dashboard;",
    "import SubmitExp from \"./submit_exp/SubmitExp\";\nimport Dashboard from './dashboard/Dashboard';\nimport { AppBar } from \"@mui/material\";\nimport styled from \"styled-components\";\nimport { Routes, Route, Link, NavLink, BrowserRouter } from \"react-router-dom\";\n\n\nconst StyledAppBar = styled(AppBar)`\n  height: 60px !important;\n  box-shadow: 0px 2px 4px -1px rgb(0 0 0 / 14%),\n    0px 4px 5px 0px rgb(0 0 0 / 10%), 0px 1px 5px 0px rgb(0 0 0 / 6%) !important;\n  display: flex;\n  flex-direction: row !important;\n  align-items: center;\n\n  a {\n    color: inherit;\n    text-decoration: none;\n  }\n\n  .nav-link {\n    height: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    padding: 0 24px;\n    box-sizing: border-box;\n    filter: brightness(90%);\n    border-bottom: 4px solid transparent;\n  }\n\n  .nav-link: hover {\n    filter: brightness(85%);\n  }\n\n  .nav-link: active {\n    filter: brightness(75%);\n  }\n\n  .link-active {\n    text-shadow: .25px 0px .5px,\n    -.25px 0px .5px;  \n    border-bottom: 4px solid;\n    filter: brightness(100%) !important;\n  }\n`;\n\nconst StyledNav = styled.nav`\n  margin: 0 12px;\n  display: flex;\n  height: 100%;\n  align-items: center\n`;\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <StyledAppBar position=\"relative\" >\n        <div style={{\n          display: \"flex\",\n          alignItems: \"center\",\n          fontWeight: 500,\n          fontSize: \"1.3em\",\n          margin: \"0 16px\",\n        }}>\n          <Link to=\"/\">Alab Management</Link>\n        </div>\n        <StyledNav>\n          <NavLink to=\"/\" className={({isActive}) => isActive ? 'link-active nav-link' : 'nav-link'}>Home</NavLink>\n          <NavLink to=\"/experiment\" className={({isActive}) => isActive ? 'link-active nav-link' : 'nav-link'}>New Experiment</NavLink>\n        </StyledNav>\n      </StyledAppBar >\n      <Routes>\n        <Route path=\"/\" element={<Dashboard />} />\n        <Route path=\"/experiment\" element={<SubmitExp />} />\n      </Routes>\n    </BrowserRouter>\n  );\n}\n\nexport default App;",
    "import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"
  ],
  "sourceRoot": ""
}