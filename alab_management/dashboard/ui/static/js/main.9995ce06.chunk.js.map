{
  "version": 3,
  "sources": [
    "submit_exp/components/TaskNode.js",
    "submit_exp/components/ExperimentFlow.js",
    "submit_exp/components/Samples.js",
    "submit_exp/components/ControlPanel.js",
    "submit_exp/SubmitExp.js",
    "dashboard/components/Devices.js",
    "dashboard/components/Experiments.js",
    "dashboard/Dashboard.js",
    "App.js",
    "index.js"
  ],
  "names": [
    "TASK_TYPES",
    "ARG_LIST",
    "Task",
    "styled",
    "Paper",
    "TaskTitle",
    "div",
    "lightBlue",
    "TaskContent",
    "TaskNode",
    "data",
    "useState",
    "taskType",
    "setTaskType",
    "hideArgs",
    "setHideArgs",
    "samples",
    "setSamples",
    "sampleNames",
    "onSampleChange",
    "event",
    "target",
    "value",
    "split",
    "sample",
    "sampleName",
    "type",
    "position",
    "style",
    "borderRadius",
    "IconButton",
    "onClick",
    "InputLabel",
    "id",
    "Select",
    "labelId",
    "label",
    "variant",
    "onChange",
    "includes",
    "_samples",
    "i",
    "length",
    "marginLeft",
    "flex",
    "map",
    "task_name",
    "MenuItem",
    "Divider",
    "FormControl",
    "margin",
    "size",
    "width",
    "sp_n",
    "args",
    "arg",
    "TextField",
    "FlowDiv",
    "RoundButton",
    "Button",
    "NODE_TYPE",
    "task",
    "ExperimentFlow",
    "uid",
    "x",
    "y",
    "els",
    "setEls",
    "setSelectedNode",
    "xPos",
    "useRef",
    "addNode",
    "useCallback",
    "current",
    "useEffect",
    "node",
    "console",
    "log",
    "padding",
    "backgroundColor",
    "grey",
    "borderBottom",
    "color",
    "startIcon",
    "elements",
    "onConnect",
    "params",
    "addEdge",
    "animated",
    "onElementsRemove",
    "elementsToRemove",
    "removeElements",
    "onSelectionChange",
    "selectedElements",
    "nodeTypes",
    "AddSampleDiv",
    "Samples",
    "setSampleNames",
    "sampleNameInput",
    "onDelete",
    "c",
    "filter",
    "_c",
    "inputRef",
    "Chip",
    "ControlPanel",
    "MainExpDiv",
    "ControlPanelContainer",
    "FlowPanelContainer",
    "SubmitExp",
    "StyledDevicesDiv",
    "Devices",
    "devices",
    "TableContainer",
    "height",
    "component",
    "Typography",
    "Table",
    "stickyHeader",
    "aria-label",
    "TableHead",
    "TableRow",
    "TableCell",
    "align",
    "TableBody",
    "row",
    "sx",
    "border",
    "scope",
    "name",
    "className",
    "status",
    "toLowerCase",
    "Experiments",
    "experiments",
    "exp",
    "tasks",
    "index",
    "rowSpan",
    "StyledDashboardDiv",
    "StyledExperimentsDiv",
    "Dashboard",
    "statusData",
    "setStatusData",
    "useInterval",
    "fetch",
    "then",
    "res",
    "json",
    "result",
    "StyledAppBar",
    "AppBar",
    "StyledNav",
    "nav",
    "App",
    "display",
    "alignItems",
    "fontWeight",
    "fontSize",
    "to",
    "isActive",
    "path",
    "element",
    "ReactDOM",
    "render",
    "StrictMode",
    "document",
    "getElementById"
  ],
  "mappings": "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",
  "file": "static/js/main.9995ce06.chunk.js",
  "sourcesContent": [
    "import React, {useState} from 'react';\r\nimport {TextField, Select, MenuItem, Paper, InputLabel, Divider, IconButton, FormControl} from '@mui/material';\r\nimport styled from 'styled-components';\r\nimport {Handle} from 'react-flow-renderer';\r\nimport ExpandLessIcon from '@mui/icons-material/ExpandLess';\r\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\r\nimport lightBlue from '@mui/material/colors/lightBlue';\r\n\r\nconst TASK_TYPES = [\"Heating\", \"Moving\", \"Weighting\"];\r\n\r\nconst ARG_LIST = {\r\n    \"Weighting\": {\r\n        \"samples\": [\"sample_1\"],\r\n        \"args\": [\"Chemical Name\", \"Amount\"],\r\n    },\r\n    \"Heating\": {\r\n        \"samples\": [\"sample_1\", \"sample_2\", \"sample_3\", \"sample_4\"],\r\n        \"args\": [\"setpoints\"],\r\n    },\r\n    \"Moving\": {\r\n        \"samples\": [\"sample\"],\r\n        \"args\": [\"dest\"],\r\n    }\r\n}\r\n\r\nconst Task = styled(Paper)`\r\n    width: 256px;\r\n`\r\n\r\nconst TaskTitle = styled.div`\r\n    padding: 0 12px 0 4px;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    background-color: ${lightBlue[50]};\r\n`;\r\n\r\nconst TaskContent = styled.div`\r\n    padding: 4px 16px 8px 16px;\r\n    display: flex;\r\n    flex-direction: column\r\n`\r\n\r\nfunction TaskNode({data}) {\r\n    const [taskType, setTaskType] = useState('');\r\n    const [hideArgs, setHideArgs] = useState(false);\r\n    const [samples, setSamples] = useState({})\r\n\r\n    const sampleNames = data.sampleNames;\r\n\r\n    const onChange = (event) => {\r\n        setTaskType(event.target.value);\r\n        if (TASK_TYPES.includes(event.target.value)) {\r\n            let _samples = {}\r\n\r\n            for (let i = 0; i < ARG_LIST[event.target.value].samples.length; i++) {\r\n                _samples[ARG_LIST[event.target.value].samples[i]] = \"\";\r\n            }\r\n\r\n            setSamples(_samples)\r\n        } else {\r\n            setSamples({})\r\n        }\r\n    };\r\n\r\n    const onSampleChange = (event) => {\r\n        setSamples((samples) => {\r\n            const [sample, sampleName] = event.target.value.split(\".\")\r\n            samples[sample] = sampleName;\r\n            return samples\r\n        })\r\n    }\r\n\r\n    const onClick = () => {\r\n        setHideArgs(!hideArgs);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Handle type=\"target\" position=\"left\" style={{borderRadius: \"0\"}}/>\r\n            <Handle type=\"source\" position=\"right\" style={{borderRadius: \"10px\"}}/>\r\n            <Task>\r\n                <TaskTitle>\r\n                    <IconButton onClick={onClick}>\r\n                        {\r\n                            hideArgs ? <ExpandMoreIcon/> : <ExpandLessIcon/>\r\n                        }\r\n\r\n                    </IconButton>\r\n                    <InputLabel id=\"demo-simple-select-label\"><h4>Task: </h4></InputLabel>\r\n                    <Select\r\n                        labelId=\"demo-simple-select-label\"\r\n                        id=\"demo-simple-select\"\r\n                        label=\"Task\"\r\n                        variant=\"standard\"\r\n                        onChange={onChange}\r\n                        value={taskType}\r\n                        style={{marginLeft: \"16px\", flex: \"1 0 0\"}}\r\n                    >\r\n                        {\r\n                            TASK_TYPES.map((task_name) => {\r\n                                return (\r\n                                    <MenuItem key={task_name} value={task_name}>{task_name}</MenuItem>\r\n                                )\r\n                            })\r\n                        }\r\n                    </Select>\r\n                </TaskTitle>\r\n                {taskType && !hideArgs && <Divider/>}\r\n                {taskType && !hideArgs && (\r\n                    <>\r\n                        <TaskContent>\r\n                            {\r\n                                ARG_LIST[taskType].samples.map((sample) => {\r\n                                    return (\r\n                                        <FormControl key={`${sample}-form`} style={{margin: \"8px 0\"}}>\r\n                                            <InputLabel id={sample}>{sample}</InputLabel>\r\n                                            <Select\r\n                                                labelId={sample}\r\n                                                id={`${sample}-select`}\r\n                                                label={sample}\r\n                                                size=\"small\"\r\n                                                variant=\"standard\"\r\n                                                onChange={onSampleChange}\r\n                                                value={samples[sample] ? `${sample}.${samples[sample]}` : samples[sample]}\r\n                                                style={{flex: \"1 0 0\", width: \"200px\"}}\r\n                                            >\r\n                                                {\r\n                                                    sampleNames.map((sp_n) => {\r\n                                                        return (\r\n                                                            <MenuItem key={`${sample}.${sp_n}`}\r\n                                                                      value={`${sample}.${sp_n}`}>\r\n                                                                {sp_n}\r\n                                                            </MenuItem>\r\n                                                        )\r\n                                                    })\r\n                                                }\r\n                                            </Select>\r\n                                        </FormControl>\r\n                                    )\r\n                                })\r\n                            }\r\n                        </TaskContent>\r\n                        <Divider/>\r\n                        <TaskContent>\r\n                            {\r\n                                ARG_LIST[taskType].args.map((arg) => {\r\n                                    return (\r\n                                        <TextField\r\n                                            id=\"outlined-required\"\r\n                                            variant=\"standard\"\r\n                                            key={arg}\r\n                                            label={arg}\r\n                                        />\r\n                                    )\r\n                                })\r\n                            }\r\n                        </TaskContent>\r\n                    </>\r\n                )}\r\n            </Task>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TaskNode;",
    "import React, {useState, useRef, useCallback, useEffect} from 'react';\r\nimport ReactFlow, {removeElements, addEdge, Controls} from 'react-flow-renderer';\r\nimport {Button} from '@mui/material';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport CallMadeIcon from '@mui/icons-material/CallMade';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport TaskNode from './TaskNode';\r\nimport {uid} from 'uid';\r\nimport styled from 'styled-components';\r\nimport {grey} from '@mui/material/colors';\r\n\r\nconst FlowDiv = styled.div`\r\n    height: calc(100vh - 60px - 36px - 32px - 1.2px);\r\n`;\r\n\r\nconst RoundButton = styled(Button)`\r\n  border-radius: 14px !important;\r\n`;\r\n\r\nconst NODE_TYPE = {\r\n    task: TaskNode\r\n}\r\n\r\nfunction ExperimentFlow({sampleNames}) {\r\n    const [els, setEls] = useState([{\r\n        id: uid(32),\r\n        position: {x: 50, y: 100},\r\n        type: \"task\",\r\n        data: {sampleNames: sampleNames},\r\n    }]);\r\n\r\n    const [selectedNode, setSelectedNode] = useState({})\r\n\r\n    const xPos = useRef(50);\r\n\r\n    const addNode = useCallback(() => {\r\n        xPos.current += 280;\r\n        setEls((els) => {\r\n            return [\r\n                ...els,\r\n                {\r\n                    id: uid(32),\r\n                    position: {x: xPos.current, y: 100},\r\n                    type: \"task\",\r\n                    data: {sampleNames: sampleNames}\r\n                }\r\n            ];\r\n        });\r\n    }, [sampleNames]);\r\n\r\n    useEffect(() => {\r\n        setEls((els) => {\r\n            return els.map((node) => {\r\n                node.data = {...node.data, sampleNames: sampleNames}\r\n                console.log(node)\r\n                return node\r\n            })\r\n        })\r\n    }, [sampleNames])\r\n\r\n    const onConnect = (params) => setEls((els) => addEdge({animated: true, ...params}, els));\r\n    const onElementsRemove = (elementsToRemove) =>\r\n        setEls((els) => removeElements(elementsToRemove, els));\r\n\r\n    return (\r\n        <div>\r\n            <div style={{padding: \"16px\", backgroundColor: grey[100], borderBottom: `1.2px solid ${grey[300]}`}}>\r\n                <RoundButton color=\"primary\" style={{margin: \"0 8px\"}} variant=\"contained\" onClick={addNode}\r\n                             startIcon={<AddIcon/>}>\r\n                    Add Node\r\n                </RoundButton>\r\n                <RoundButton color=\"primary\" style={{margin: \"0 8px\"}} variant=\"contained\" startIcon={<CallMadeIcon/>}>\r\n                    Submit\r\n                </RoundButton>\r\n            </div>\r\n            <FlowDiv>\r\n                <ReactFlow\r\n                    elements={els}\r\n                    onConnect={onConnect}\r\n                    onElementsRemove={onElementsRemove}\r\n                    onSelectionChange={(selectedElements) => {\r\n                        const node = selectedElements?.[0]\r\n                        setSelectedNode(node)\r\n                    }}\r\n                    nodeTypes={NODE_TYPE}\r\n                >\r\n                </ReactFlow>\r\n            </FlowDiv>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ExperimentFlow;",
    "import React, {useRef} from 'react';\r\nimport {Chip, TextField, Button} from '@mui/material';\r\nimport styled from 'styled-components';\r\n\r\nconst AddSampleDiv = styled.div`\r\n    display: flex;\r\n    align-items: baseline;\r\n    margin-bottom: 16px;\r\n`;\r\n\r\nfunction Samples({style, sampleNames, setSampleNames}) {\r\n    const sampleNameInput = useRef('')\r\n\r\n    const onDelete = (data) => () => {\r\n        setSampleNames((c) => c.filter((_c) => _c !== data));\r\n    };\r\n\r\n    const onClick = () => {\r\n        setSampleNames((c) => c.includes(sampleNameInput.current.value) ?\r\n            sampleNames : [...sampleNames, sampleNameInput.current.value])\r\n    }\r\n    return (\r\n        <div style={{...style, margin: \"16px\"}}>\r\n            <AddSampleDiv>\r\n                <TextField id=\"add_sample_input\" size=\"small\" inputRef={sampleNameInput} style={{width: \"50%\"}}\r\n                           label=\"Sample Name\" variant=\"standard\"/>\r\n                <Button variant=\"outlined\" onClick={onClick} style={{marginLeft: \"16px\"}}>Add sample</Button>\r\n            </AddSampleDiv>\r\n            <h4>Samples:</h4>\r\n            {\r\n                sampleNames.map((data) => {\r\n                    return (\r\n                        <Chip\r\n                            style={{margin: \"0 4px\"}}\r\n                            key={data}\r\n                            label={data}\r\n                            onDelete={onDelete(data)}\r\n                        />\r\n                    )\r\n                })\r\n            }\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Samples;",
    "import React from 'react';\r\nimport Samples from './Samples';\r\n\r\nfunction ControlPanel({sampleNames, setSampleNames}) {\r\n    return (\r\n        <Samples sampleNames={sampleNames} setSampleNames={setSampleNames}/>\r\n    )\r\n}\r\n\r\nexport default ControlPanel;\r\n",
    "import React, {useState} from 'react';\r\nimport ExperimentFlow from \"./components/ExperimentFlow\";\r\nimport ControlPanel from './components/ControlPanel';\r\nimport styled from 'styled-components';\r\nimport {grey} from '@mui/material/colors';\r\n\r\nconst MainExpDiv = styled.div`\r\n    display: flex;\r\n    height: calc(100vb-60px);\r\n`;\r\n\r\nconst ControlPanelContainer = styled.div`\r\n    background-color: ${grey[100]};\r\n    width: 24%;\r\n    min-width: 320px;\r\n    max-width: 400px;\r\n    border-right: 1.2px solid ${grey[300]};\r\n`;\r\n\r\nconst FlowPanelContainer = styled.div`\r\n    flex: 1 0 0\r\n`;\r\n\r\nfunction SubmitExp() {\r\n    const [sampleNames, setSampleNames] = useState([]);\r\n\r\n    return (\r\n        <MainExpDiv>\r\n            <ControlPanelContainer>\r\n                <ControlPanel sampleNames={sampleNames} setSampleNames={setSampleNames}/>\r\n            </ControlPanelContainer>\r\n            <FlowPanelContainer>\r\n                <ExperimentFlow sampleNames={sampleNames}/>\r\n            </FlowPanelContainer>\r\n        </MainExpDiv>\r\n    )\r\n}\r\n\r\nexport default SubmitExp;\r\n",
    "import React from 'react';\r\nimport Paper from '@mui/material/Paper';\r\nimport styled from 'styled-components';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport Typography from '@mui/material/Typography';\r\n\r\nconst StyledDevicesDiv = styled.div`\r\n  margin: 12px 16px;\r\n\r\n  .status {\r\n    font-family: ui-monospace,SFMono-Regular,SF Mono,\r\n      Menlo,Consolas,Liberation Mono,monospace;\r\n    color: black;\r\n  }\r\n\r\n  .status-occupied {\r\n    color: red;\r\n  }\r\n\r\n  .status-idle {\r\n    color: green;\r\n  }\r\n  \r\n  .task-id {\r\n    font-family: ui-monospace,SFMono-Regular,SF Mono,\r\n      Menlo,Consolas,Liberation Mono,monospace;\r\n  }\r\n\r\n  h3 {\r\n    padding: 4px 8px;\r\n  }\r\n`;\r\n\r\nfunction Devices({devices}) {\r\n    return (\r\n        <TableContainer style={{height: \"100%\"}} component={Paper}>\r\n            <StyledDevicesDiv>\r\n                <Typography variant=\"h5\">Device View</Typography>\r\n                <Table stickyHeader aria-label=\"device table\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell><b>Device Name</b></TableCell>\r\n                            <TableCell align=\"center\"><b>Type</b></TableCell>\r\n                            <TableCell align=\"center\"><b>Status</b></TableCell>\r\n                            <TableCell align=\"center\"><b>Task</b></TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {devices.map((row) => (\r\n                            <TableRow\r\n                                key={row.name}\r\n                                sx={{'&:last-child td, &:last-child th': {border: 0}}}\r\n                            >\r\n                                <TableCell component=\"th\" scope=\"row\">\r\n                                    {row.name}\r\n                                </TableCell>\r\n                                <TableCell align=\"center\">{row.type}</TableCell>\r\n                                <TableCell align=\"center\">\r\n                  <span className={`status status-${row.status.toLowerCase()}`}>\r\n                    {row.status === \"OCCUPIED\" || row.status === \"IDLE\" ? '⬤' : ''} {row.status}\r\n                  </span>\r\n                                </TableCell>\r\n                                <TableCell align=\"center\"><span className=\"task-id\">{row.task}</span></TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n                    </TableBody>\r\n                </Table>\r\n            </StyledDevicesDiv>\r\n        </TableContainer>\r\n    )\r\n}\r\n\r\nexport default Devices;",
    "import React from 'react';\r\nimport Paper from '@mui/material/Paper';\r\nimport styled from 'styled-components';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport Typography from '@mui/material/Typography';\r\n\r\nconst StyledDevicesDiv = styled.div`\r\n  margin: 12px 16px;\r\n\r\n  .status,\r\n  .task-id,\r\n  .task-type {\r\n    font-family: ui-monospace,SFMono-Regular,SF Mono,\r\n      Menlo,Consolas,Liberation Mono,monospace;\r\n    color: black;\r\n  }\r\n\r\n  .task-id {\r\n    font-size: 60%;\r\n  }\r\n\r\n  .status-waiting {\r\n    color: blue;\r\n  }\r\n\r\n  .status-running {\r\n    color: red;\r\n  }\r\n\r\n  .status-error {\r\n    color: red;\r\n    font-weight: bold;\r\n  }\r\n\r\n  .status-ready {\r\n    color: green;\r\n  }\r\n\r\n  h3 {\r\n    padding: 4px 8px;\r\n  }\r\n`;\r\n\r\nfunction Experiments({experiments}) {\r\n    console.log(experiments)\r\n    return (\r\n        <TableContainer style={{height: \"100%\"}} component={Paper}>\r\n            <StyledDevicesDiv>\r\n                <Typography variant=\"h5\">Running Experiments</Typography>\r\n                <Table stickyHeader aria-label=\"task table\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell align=\"center\"><b>Exp Name</b></TableCell>\r\n                            <TableCell align=\"center\"><b>Task Id</b></TableCell>\r\n                            <TableCell align=\"center\"><b>Type</b></TableCell>\r\n                            <TableCell align=\"center\"><b>Status</b></TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {experiments.map((exp) => (exp.tasks?.map((row, index) => (\r\n                            <TableRow\r\n                                key={row.id}\r\n                            >\r\n                                {index === 0 ? (\r\n                                    <TableCell align=\"center\" rowSpan={exp.tasks.length} component=\"th\" scope=\"row\">\r\n                                        <span className=\"exp-name\">{exp.name}</span>\r\n                                    </TableCell>\r\n                                ) : <></>}\r\n                                <TableCell align=\"center\">\r\n                                    <span className=\"task-id\">{row.id}</span>\r\n                                </TableCell>\r\n                                <TableCell align=\"center\"><span className=\"task-type\">{row.type}</span></TableCell>\r\n                                <TableCell align=\"center\">\r\n                  <span className={`status status-${row.status.toLowerCase()}`}>\r\n                    {row.status}\r\n                  </span>\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        ))))}\r\n                    </TableBody>\r\n                </Table>\r\n            </StyledDevicesDiv>\r\n        </TableContainer>\r\n    )\r\n}\r\n\r\nexport default Experiments;",
    "import React, {useState} from 'react';\r\nimport Devices from './components/Devices';\r\nimport Experiments from './components/Experiments';\r\nimport styled from 'styled-components';\r\nimport useInterval from '@use-it/interval';\r\n\r\nconst STATUS_API = \"/api/status\";\r\n\r\nconst StyledDashboardDiv = styled.div`\r\n  margin: 12px 8px;\r\n  height: calc(100vh - 60px - 24px);\r\n  display: flex;\r\n`;\r\n\r\nconst StyledDevicesDiv = styled.div`\r\n  height: 100%;\r\n  width: calc(50vw - 20px);\r\n  margin-right: 12px;\r\n`;\r\n\r\nconst StyledExperimentsDiv = styled.div`\r\n  height: 100%;\r\n  width: calc(50vw - 8px);\r\n`;\r\n\r\nfunction Dashboard() {\r\n    // const [statusData, setStatusData] = useState({devices: [], experiements: [{\r\n    //   name: \"xxxxx\",\r\n    //   id: \"xxxxxx\",\r\n    //   samples: [{name: \"xxx\", id: \"fdfdsf\"}],\r\n    //   tasks: [{id: \"xxxx\", status: \"ERROR\", type: \"Heating\"},\r\n    //           {id: \"xxxx\", status: \"RUNNING\", type: \"Heating\"}]\r\n    // }, {\r\n    //   name: \"xxxxx\",\r\n    //   id: \"xxxxxx\",\r\n    //   samples: [{name: \"xxx\", id: \"fdfdsf\"}],\r\n    //   tasks: [{id: \"xxxx\", status: \"RUNNING\", type: \"Heating\"},\r\n    //           {id: \"xxxx\", status: \"READY\", type: \"Heating\"}]\r\n    // }]});\r\n\r\n    const [statusData, setStatusData] = useState({devices: [], experiments: []});\r\n\r\n    useInterval(() => {\r\n        fetch(STATUS_API)\r\n            .then(res => res.json())\r\n            .then(result => {\r\n                setStatusData(result);\r\n            })\r\n    }, 1000);\r\n\r\n    return (\r\n        <StyledDashboardDiv>\r\n            <StyledDevicesDiv>\r\n                <Devices devices={statusData.devices}/>\r\n            </StyledDevicesDiv>\r\n            <StyledExperimentsDiv>\r\n                <Experiments experiments={statusData.experiments}/>\r\n            </StyledExperimentsDiv>\r\n        </StyledDashboardDiv>\r\n    )\r\n}\r\n\r\nexport default Dashboard;",
    "import SubmitExp from \"./submit_exp/SubmitExp\";\nimport Dashboard from './dashboard/Dashboard';\nimport {AppBar} from \"@mui/material\";\nimport styled from \"styled-components\";\nimport {Routes, Route, Link, NavLink, BrowserRouter} from \"react-router-dom\";\n\n\nconst StyledAppBar = styled(AppBar)`\n  height: 60px !important;\n  box-shadow: 0px 2px 4px -1px rgb(0 0 0 / 14%),\n    0px 4px 5px 0px rgb(0 0 0 / 10%), 0px 1px 5px 0px rgb(0 0 0 / 6%) !important;\n  display: flex;\n  flex-direction: row !important;\n  align-items: center;\n\n  a {\n    color: inherit;\n    text-decoration: none;\n  }\n\n  .nav-link {\n    height: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    padding: 0 24px;\n    box-sizing: border-box;\n    filter: brightness(90%);\n    border-bottom: 4px solid transparent;\n  }\n\n  .nav-link: hover {\n    filter: brightness(85%);\n  }\n\n  .nav-link: active {\n    filter: brightness(75%);\n  }\n\n  .link-active {\n    text-shadow: .25px 0px .5px,\n    -.25px 0px .5px;  \n    border-bottom: 4px solid;\n    filter: brightness(100%) !important;\n  }\n`;\n\nconst StyledNav = styled.nav`\n  margin: 0 12px;\n  display: flex;\n  height: 100%;\n  align-items: center\n`;\n\nfunction App() {\n    return (\n        <BrowserRouter>\n            <StyledAppBar position=\"relative\">\n                <div style={{\n                    display: \"flex\",\n                    alignItems: \"center\",\n                    fontWeight: 500,\n                    fontSize: \"1.3em\",\n                    margin: \"0 16px\",\n                }}>\n                    <Link to=\"/\">Alab Management</Link>\n                </div>\n                <StyledNav>\n                    <NavLink to=\"/\"\n                             className={({isActive}) => isActive ? 'link-active nav-link' : 'nav-link'}>Home</NavLink>\n                    <NavLink to=\"/experiment\"\n                             className={({isActive}) => isActive ? 'link-active nav-link' : 'nav-link'}>New\n                        Experiment</NavLink>\n                </StyledNav>\n            </StyledAppBar>\n            <Routes>\n                <Route path=\"/\" element={<Dashboard/>}/>\n                <Route path=\"/experiment\" element={<SubmitExp/>}/>\n            </Routes>\n        </BrowserRouter>\n    );\n}\n\nexport default App;",
    "import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"
  ],
  "sourceRoot": ""
}